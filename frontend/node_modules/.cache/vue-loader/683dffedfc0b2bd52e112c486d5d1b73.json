{"remainingRequest":"/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css","dependencies":[{"path":"/app/src/components/HelloWorld.vue","mtime":1710761433120},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1710760193109},{"path":"/app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1710760193665},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1710760193491},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1710760179457},{"path":"/app/node_modules/vue-loader-v16/dist/index.js","mtime":1710760193665}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qIFRhaWx3aW5kIENTUyBpcyB1c2VkIGhlcmUsIGVuc3VyZSBpdCdzIGluc3RhbGxlZCBhbmQgY29uZmlndXJlZCAqLwpAdGFpbHdpbmQgYmFzZTsKQHRhaWx3aW5kIGNvbXBvbmVudHM7CkB0YWlsd2luZCB1dGlsaXRpZXM7Cg=="},{"version":3,"sources":["/app/src/components/HelloWorld.vue"],"names":[],"mappings":";AAoGA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/app/src/components/HelloWorld.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"container mx-auto px-4 py-8\">\n    <h1 class=\"title text-3xl font-semibold text-center text-gray-800 mb-8\">\n      Document Question Answering\n    </h1>\n    <div class=\"form-container bg-white shadow-md rounded-lg p-6\">\n      <label\n        for=\"file-upload\"\n        class=\"block text-sm font-medium text-gray-700 mb-2\"\n        >Upload Document</label\n      >\n      <input\n        id=\"file-upload\"\n        type=\"file\"\n        @change=\"handleFileUpload\"\n        class=\"file-input block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 mb-4\"\n      />\n      <label\n        for=\"query-input\"\n        class=\"block text-sm font-medium text-gray-700 mb-2\"\n        >Enter Your Query</label\n      >\n      <input\n        id=\"query-input\"\n        type=\"text\"\n        v-model=\"query\"\n        placeholder=\"Enter your query\"\n        class=\"query-input block w-full px-4 py-2 mb-4 border rounded-md shadow-sm placeholder-gray-400 focus:ring-blue-500 focus:border-blue-500\"\n      />\n      <button\n        @click=\"submitRequest\"\n        class=\"submit-button w-full text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center\"\n      >\n        Submit\n      </button>\n    </div>\n    <div v-if=\"apiResponse\" class=\"response-container mt-8\">\n      <h3 class=\"response-title text-xl font-semibold text-gray-800 mb-4\">\n        API Response:\n      </h3>\n      <div class=\"response bg-gray-100 rounded-lg p-4\">\n        <div v-html=\"renderMarkdown(apiResponse)\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport markdownIt from \"markdown-it\";\n\nexport default {\n  name: \"HelloWorld\",\n  data() {\n    return {\n      file: null,\n      query: \"\",\n      apiResponse: null,\n    };\n  },\n  methods: {\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n    },\n    async submitRequest() {\n      if (!this.file || !this.query) {\n        alert(\"Please select a file and enter a query.\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"file\", this.file);\n      formData.append(\"query\", this.query);\n\n      try {\n        const response = await axios.post(\n          \"http://localhost:8080/predict\",\n          formData,\n          {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }\n        );\n\n        this.apiResponse = response.data.result;\n      } catch (error) {\n        console.error(\"API request failed:\", error);\n        this.apiResponse = \"Failed to get response from the API.\";\n      }\n    },\n    renderMarkdown(text) {\n      const md = new markdownIt();\n      return md.render(text);\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Tailwind CSS is used here, ensure it's installed and configured */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</style>\n"]}]}